[{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks.html","title":"IcedTasks","content":"Awaitable \nAwaiter \nCancellableTasks \nCancellableValueTasks \nColdTasks \nParallelAsyncs \nValueTaskExtensions \nValueTasks \nAwaitable\u003C\u0027Awaitable, \u0027Awaiter, \u0027TResult\u003E \nAwaiter\u003C\u0027Awaiter, \u0027TResult\u003E \nParallelAsync \nParallelAsyncBuilderBase \nParallelAsyncBuilderUsingStartChild \nParallelAsyncBuilderUsingStartImmediateAsTask"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaitable.html","title":"Awaitable","content":"Awaitable \n\n Functions for Awaitables\n \nAwaitable.getAwaiter \ngetAwaiter"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaitable.html#getAwaiter","title":"Awaitable.getAwaiter","content":"Awaitable.getAwaiter \ngetAwaiter \n\n Creates an awaiter for this value.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaiter.html","title":"Awaiter","content":"Awaiter \n\n Functions for Awaiters\n \nAwaiter.isCompleted \nisCompleted \nAwaiter.getResult \ngetResult"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaiter.html#isCompleted","title":"Awaiter.isCompleted","content":"Awaiter.isCompleted \nisCompleted \n\n Gets a value that indicates whether the asynchronous task has completed\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaiter.html#getResult","title":"Awaiter.getResult","content":"Awaiter.getResult \ngetResult \n\n Ends the wait for the completion of the asynchronous task.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks.html","title":"CancellableTasks","content":"CancellableTasks \n\n Contains methods to build CancellableTasks using the F# computation expression syntax\n \nCancellableTasks.AsyncExtenions \nAsyncExtenions \nCancellableTasks.CancellableTask \nCancellableTask \nCancellableTasks.CancellableTaskBuilder \nCancellableTaskBuilder \nCancellableTasks.BackgroundCancellableTaskBuilder \nBackgroundCancellableTaskBuilder \nCancellableTasks.CancellableTask\u003C\u0027T\u003E \nCancellableTask\u003C\u0027T\u003E \nCancellableTasks.CancellableTask \nCancellableTask \nCancellableTasks.CancellableTaskBuilder \nCancellableTaskBuilder \nCancellableTasks.CancellableTaskBuilderBase \nCancellableTaskBuilderBase \nCancellableTasks.CancellableTaskCode\u003C\u0027TOverall, \u0027T\u003E \nCancellableTaskCode\u003C\u0027TOverall, \u0027T\u003E \nCancellableTasks.CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nCancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nCancellableTasks.CancellableTaskResumptionFunc\u003C\u0027TOverall\u003E \nCancellableTaskResumptionFunc\u003C\u0027TOverall\u003E \nCancellableTasks.CancellableTaskStateMachine\u003C\u0027TOverall\u003E \nCancellableTaskStateMachine\u003C\u0027TOverall\u003E \nCancellableTasks.CancellableTaskStateMachineData\u003C\u0027T\u003E \nCancellableTaskStateMachineData\u003C\u0027T\u003E"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-asyncextenions.html","title":"AsyncExtenions","content":"AsyncExtenions \n\n A set of extension methods making it possible to bind against \u003Ca href=\u0022https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletask-1.html\u0022\u003ECancellableTask\u003C/a\u003E in async computations.\n  \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html","title":"CancellableTask","content":"CancellableTask \n\n Contains a set of standard functional helper function\n \nCancellableTask.getCancellationToken \ngetCancellationToken \nCancellableTask.singleton \nsingleton \nCancellableTask.bind \nbind \nCancellableTask.map \nmap \nCancellableTask.apply \napply \nCancellableTask.zip \nzip \nCancellableTask.parallelZip \nparallelZip \nCancellableTask.ofUnit \nofUnit \nCancellableTask.toUnit \ntoUnit"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#getCancellationToken","title":"CancellableTask.getCancellationToken","content":"CancellableTask.getCancellationToken \ngetCancellationToken \nGets the default cancellation token for executing computations."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#singleton","title":"CancellableTask.singleton","content":"CancellableTask.singleton \nsingleton \nLifts an item to a CancellableTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#bind","title":"CancellableTask.bind","content":"CancellableTask.bind \nbind \nAllows chaining of CancellableTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#map","title":"CancellableTask.map","content":"CancellableTask.map \nmap \nAllows chaining of CancellableTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#apply","title":"CancellableTask.apply","content":"CancellableTask.apply \napply \nAllows chaining of CancellableTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#zip","title":"CancellableTask.zip","content":"CancellableTask.zip \nzip \nTakes two CancellableTasks, starts them serially in order of left to right, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#parallelZip","title":"CancellableTask.parallelZip","content":"CancellableTask.parallelZip \nparallelZip \nTakes two CancellableTask, starts them concurrently, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#ofUnit","title":"CancellableTask.ofUnit","content":"CancellableTask.ofUnit \nofUnit \nCoverts a CancellableTask to a CancellableTask\\\u003Cunit\\\u003E."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskmodule.html#toUnit","title":"CancellableTask.toUnit","content":"CancellableTask.toUnit \ntoUnit \nCoverts a CancellableTask\\\u003C_\\\u003E to a CancellableTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuildermodule.html","title":"CancellableTaskBuilder","content":"CancellableTaskBuilder \n\n Contains the cancellableTask computation expression builder.\n \nCancellableTaskBuilder.cancellableTask \ncancellableTask \nCancellableTaskBuilder.backgroundCancellableTask \nbackgroundCancellableTask"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuildermodule.html#cancellableTask","title":"CancellableTaskBuilder.cancellableTask","content":"CancellableTaskBuilder.cancellableTask \ncancellableTask \n\n Builds a cancellableTask using computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuildermodule.html#backgroundCancellableTask","title":"CancellableTaskBuilder.backgroundCancellableTask","content":"CancellableTaskBuilder.backgroundCancellableTask \nbackgroundCancellableTask \n\n Builds a cancellableTask using computation expression syntax which switches to execute on a background thread if not already doing so.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-backgroundcancellabletaskbuilder.html","title":"BackgroundCancellableTaskBuilder","content":"BackgroundCancellableTaskBuilder \n\n Contains methods to build CancellableTasks using the F# computation expression syntax\n \nBackgroundCancellableTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBackgroundCancellableTaskBuilder.Run \nRun \nBackgroundCancellableTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-backgroundcancellabletaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"BackgroundCancellableTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"BackgroundCancellableTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-backgroundcancellabletaskbuilder.html#Run","title":"BackgroundCancellableTaskBuilder.Run","content":"BackgroundCancellableTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task, executing in the threadpool using Task.Run\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-backgroundcancellabletaskbuilder.html#RunDynamic","title":"BackgroundCancellableTaskBuilder.RunDynamic","content":"BackgroundCancellableTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletask-1.html","title":"CancellableTask\u003C\u0027T\u003E","content":"CancellableTask\u003C\u0027T\u003E \n\n CancellationToken -\u003E Task\u003C\u0027T\u003E\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletask.html","title":"CancellableTask","content":"CancellableTask \n\n CancellationToken -\u003E Task\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilder.html","title":"CancellableTaskBuilder","content":"CancellableTaskBuilder \n\n Contains methods to build CancellableTasks using the F# computation expression syntax\n \nCancellableTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCancellableTaskBuilder.Run \nRun \nCancellableTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"CancellableTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"CancellableTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilder.html#Run","title":"CancellableTaskBuilder.Run","content":"CancellableTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilder.html#RunDynamic","title":"CancellableTaskBuilder.RunDynamic","content":"CancellableTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html","title":"CancellableTaskBuilderBase","content":"CancellableTaskBuilderBase \n\n Contains methods to build CancellableTasks using the F# computation expression syntax\n \nCancellableTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCancellableTaskBuilderBase.Combine \nCombine \nCancellableTaskBuilderBase.Delay \nDelay \nCancellableTaskBuilderBase.For \nFor \nCancellableTaskBuilderBase.Return \nReturn \nCancellableTaskBuilderBase.TryFinally \nTryFinally \nCancellableTaskBuilderBase.TryWith \nTryWith \nCancellableTaskBuilderBase.Using \nUsing \nCancellableTaskBuilderBase.While \nWhile \nCancellableTaskBuilderBase.Zero \nZero"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#\u0060\u0060.ctor\u0060\u0060","title":"CancellableTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060","content":"CancellableTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#Combine","title":"CancellableTaskBuilderBase.Combine","content":"CancellableTaskBuilderBase.Combine \nCombine \nCreates an CancellableTask that first runs task1\n and then runs computation2, returning the result of computation2. \n\n\n The existence of this method permits the use of expression sequencing in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#Delay","title":"CancellableTaskBuilderBase.Delay","content":"CancellableTaskBuilderBase.Delay \nDelay \nCreates a CancellableTask that runs generator"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#For","title":"CancellableTaskBuilderBase.For","content":"CancellableTaskBuilderBase.For \nFor \nCreates an CancellableTask that enumerates the sequence seq\n on demand and runs body for each element. \nA cancellation check is performed on each iteration of the loop.\n\n The existence of this method permits the use of for in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#Return","title":"CancellableTaskBuilderBase.Return","content":"CancellableTaskBuilderBase.Return \nReturn \nCreates an computation that returns the result v. \nA cancellation check is performed when the computation is executed.\n\n The existence of this method permits the use of return in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#TryFinally","title":"CancellableTaskBuilderBase.TryFinally","content":"CancellableTaskBuilderBase.TryFinally \nTryFinally \nCreates an CancellableTask that runs computation. The action compensation is executed\n after computation completes, whether computation exits normally or by an exception. If compensation raises an exception itself\n the original exception is discarded and the new exception becomes the overall result of the computation. \n\n\n The existence of this method permits the use of try/finally in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#TryWith","title":"CancellableTaskBuilderBase.TryWith","content":"CancellableTaskBuilderBase.TryWith \nTryWith \nCreates an CancellableTask that runs computation and returns its result.\n If an exception happens then catchHandler(exn) is called and the resulting computation executed instead. \n\n\n The existence of this method permits the use of try/with in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#Using","title":"CancellableTaskBuilderBase.Using","content":"CancellableTaskBuilderBase.Using \nUsing \nCreates an CancellableTask that runs binder(resource).\n The action resource.DisposeAsync() is executed as this computation yields its result\n or if the CancellableTask exits by an exception or by cancellation. \n\n\n The existence of this method permits the use of use and use! in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#While","title":"CancellableTaskBuilderBase.While","content":"CancellableTaskBuilderBase.While \nWhile \nCreates an CancellableTask that runs computation repeatedly\n until guard() becomes false. \n\n\n The existence of this method permits the use of while in the\n cancellableTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskbuilderbase.html#Zero","title":"CancellableTaskBuilderBase.Zero","content":"CancellableTaskBuilderBase.Zero \nZero \nCreates an CancellableTask that just returns (). \n\n The existence of this method permits the use of empty else branches in the\n cancellableTask { ... } computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskcode-2.html","title":"CancellableTaskCode\u003C\u0027TOverall, \u0027T\u003E","content":"CancellableTaskCode\u003C\u0027TOverall, \u0027T\u003E \n\n A special compiler-recognised delegate type for specifying blocks of CancellableTask code with access to the state machine\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskresumptiondynamicinfo-1.html","title":"CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E","content":"CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a CancellableTask state machine created dynamically\n \nCancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \nCancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskresumptiondynamicinfo-1.html#ResumptionData","title":"CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData","content":"CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskresumptiondynamicinfo-1.html#ResumptionFunc","title":"CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc","content":"CancellableTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskresumptionfunc-1.html","title":"CancellableTaskResumptionFunc\u003C\u0027TOverall\u003E","content":"CancellableTaskResumptionFunc\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a CancellableTask state machine created dynamically\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskstatemachine-1.html","title":"CancellableTaskStateMachine\u003C\u0027TOverall\u003E","content":"CancellableTaskStateMachine\u003C\u0027TOverall\u003E \n\n This is used by the compiler as a template for creating state machine structs\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskstatemachinedata-1.html","title":"CancellableTaskStateMachineData\u003C\u0027T\u003E","content":"CancellableTaskStateMachineData\u003C\u0027T\u003E \n\n The extra data stored in ResumableStateMachine for tasks\n \nCancellableTaskStateMachineData\u003C\u0027T\u003E.ThrowIfCancellationRequested \nThrowIfCancellationRequested \nCancellableTaskStateMachineData\u003C\u0027T\u003E.CancellationToken \nCancellationToken \nCancellableTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \nCancellableTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskstatemachinedata-1.html#ThrowIfCancellationRequested","title":"CancellableTaskStateMachineData\u003C\u0027T\u003E.ThrowIfCancellationRequested","content":"CancellableTaskStateMachineData\u003C\u0027T\u003E.ThrowIfCancellationRequested \nThrowIfCancellationRequested \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskstatemachinedata-1.html#CancellationToken","title":"CancellableTaskStateMachineData\u003C\u0027T\u003E.CancellationToken","content":"CancellableTaskStateMachineData\u003C\u0027T\u003E.CancellationToken \nCancellationToken \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskstatemachinedata-1.html#Result","title":"CancellableTaskStateMachineData\u003C\u0027T\u003E.Result","content":"CancellableTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellabletasks-cancellabletaskstatemachinedata-1.html#MethodBuilder","title":"CancellableTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder","content":"CancellableTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks.html","title":"CancellableValueTasks","content":"CancellableValueTasks \n\n Contains methods to build CancellableTasks using the F# computation expression syntax\n \nCancellableValueTasks.AsyncExtenions \nAsyncExtenions \nCancellableValueTasks.CancellableValueTask \nCancellableValueTask \nCancellableValueTasks.CancellableValueTaskBuilder \nCancellableValueTaskBuilder \nCancellableValueTasks.BackgroundCancellableValueTaskBuilder \nBackgroundCancellableValueTaskBuilder \nCancellableValueTasks.CancellableValueTask\u003C\u0027T\u003E \nCancellableValueTask\u003C\u0027T\u003E \nCancellableValueTasks.CancellableValueTask \nCancellableValueTask \nCancellableValueTasks.CancellableValueTaskBuilder \nCancellableValueTaskBuilder \nCancellableValueTasks.CancellableValueTaskBuilderBase \nCancellableValueTaskBuilderBase \nCancellableValueTasks.CancellableValueTaskCode\u003C\u0027TOverall, \u0027T\u003E \nCancellableValueTaskCode\u003C\u0027TOverall, \u0027T\u003E \nCancellableValueTasks.CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nCancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nCancellableValueTasks.CancellableValueTaskResumptionFunc\u003C\u0027TOverall\u003E \nCancellableValueTaskResumptionFunc\u003C\u0027TOverall\u003E \nCancellableValueTasks.CancellableValueTaskStateMachine\u003C\u0027TOverall\u003E \nCancellableValueTaskStateMachine\u003C\u0027TOverall\u003E \nCancellableValueTasks.CancellableValueTaskStateMachineData\u003C\u0027T\u003E \nCancellableValueTaskStateMachineData\u003C\u0027T\u003E"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-asyncextenions.html","title":"AsyncExtenions","content":"AsyncExtenions \n\n A set of extension methods making it possible to bind against \u003Ca href=\u0022https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetask-1.html\u0022\u003ECancellableValueTask\u003C/a\u003E in async computations.\n  \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html","title":"CancellableValueTask","content":"CancellableValueTask \n\n Contains a set of standard functional helper function\n \nCancellableValueTask.getCancellationToken \ngetCancellationToken \nCancellableValueTask.singleton \nsingleton \nCancellableValueTask.bind \nbind \nCancellableValueTask.map \nmap \nCancellableValueTask.apply \napply \nCancellableValueTask.zip \nzip \nCancellableValueTask.parallelZip \nparallelZip \nCancellableValueTask.ofUnit \nofUnit \nCancellableValueTask.toUnit \ntoUnit"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#getCancellationToken","title":"CancellableValueTask.getCancellationToken","content":"CancellableValueTask.getCancellationToken \ngetCancellationToken \nGets the default cancellation token for executing computations."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#singleton","title":"CancellableValueTask.singleton","content":"CancellableValueTask.singleton \nsingleton \nLifts an item to a CancellableValueTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#bind","title":"CancellableValueTask.bind","content":"CancellableValueTask.bind \nbind \nAllows chaining of CancellableValueTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#map","title":"CancellableValueTask.map","content":"CancellableValueTask.map \nmap \nAllows chaining of CancellableValueTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#apply","title":"CancellableValueTask.apply","content":"CancellableValueTask.apply \napply \nAllows chaining of CancellableValueTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#zip","title":"CancellableValueTask.zip","content":"CancellableValueTask.zip \nzip \nTakes two CancellableValueTasks, starts them serially in order of left to right, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#parallelZip","title":"CancellableValueTask.parallelZip","content":"CancellableValueTask.parallelZip \nparallelZip \nTakes two CancellableValueTask, starts them concurrently, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#ofUnit","title":"CancellableValueTask.ofUnit","content":"CancellableValueTask.ofUnit \nofUnit \nCoverts a CancellableValueTask to a CancellableValueTask\\\u003Cunit\\\u003E."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskmodule.html#toUnit","title":"CancellableValueTask.toUnit","content":"CancellableValueTask.toUnit \ntoUnit \nCoverts a CancellableValueTask\\\u003C_\\\u003E to a CancellableValueTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuildermodule.html","title":"CancellableValueTaskBuilder","content":"CancellableValueTaskBuilder \n\n Contains the cancellableTask computation expression builder.\n \nCancellableValueTaskBuilder.cancellableValueTask \ncancellableValueTask \nCancellableValueTaskBuilder.backgroundCancellableValueTask \nbackgroundCancellableValueTask"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuildermodule.html#cancellableValueTask","title":"CancellableValueTaskBuilder.cancellableValueTask","content":"CancellableValueTaskBuilder.cancellableValueTask \ncancellableValueTask \n\n Builds a cancellableValueTask using computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuildermodule.html#backgroundCancellableValueTask","title":"CancellableValueTaskBuilder.backgroundCancellableValueTask","content":"CancellableValueTaskBuilder.backgroundCancellableValueTask \nbackgroundCancellableValueTask \n\n Builds a cancellableValueTask using computation expression syntax which switches to execute on a background thread if not already doing so.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-backgroundcancellablevaluetaskbuilder.html","title":"BackgroundCancellableValueTaskBuilder","content":"BackgroundCancellableValueTaskBuilder \n\n Contains methods to build CancellableValueTasks using the F# computation expression syntax\n \nBackgroundCancellableValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBackgroundCancellableValueTaskBuilder.Run \nRun \nBackgroundCancellableValueTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-backgroundcancellablevaluetaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"BackgroundCancellableValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"BackgroundCancellableValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-backgroundcancellablevaluetaskbuilder.html#Run","title":"BackgroundCancellableValueTaskBuilder.Run","content":"BackgroundCancellableValueTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task, executing in the threadpool using Task.Run\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-backgroundcancellablevaluetaskbuilder.html#RunDynamic","title":"BackgroundCancellableValueTaskBuilder.RunDynamic","content":"BackgroundCancellableValueTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetask-1.html","title":"CancellableValueTask\u003C\u0027T\u003E","content":"CancellableValueTask\u003C\u0027T\u003E \n\n CancellationToken -\u003E Task\u003C\u0027T\u003E\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetask.html","title":"CancellableValueTask","content":"CancellableValueTask \n\n CancellationToken -\u003E Task\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilder.html","title":"CancellableValueTaskBuilder","content":"CancellableValueTaskBuilder \n\n Contains methods to build CancellableValueTasks using the F# computation expression syntax\n \nCancellableValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCancellableValueTaskBuilder.Run \nRun \nCancellableValueTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"CancellableValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"CancellableValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilder.html#Run","title":"CancellableValueTaskBuilder.Run","content":"CancellableValueTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilder.html#RunDynamic","title":"CancellableValueTaskBuilder.RunDynamic","content":"CancellableValueTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html","title":"CancellableValueTaskBuilderBase","content":"CancellableValueTaskBuilderBase \n\n Contains methods to build CancellableValueTasks using the F# computation expression syntax\n \nCancellableValueTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCancellableValueTaskBuilderBase.Combine \nCombine \nCancellableValueTaskBuilderBase.Delay \nDelay \nCancellableValueTaskBuilderBase.For \nFor \nCancellableValueTaskBuilderBase.Return \nReturn \nCancellableValueTaskBuilderBase.TryFinally \nTryFinally \nCancellableValueTaskBuilderBase.TryWith \nTryWith \nCancellableValueTaskBuilderBase.Using \nUsing \nCancellableValueTaskBuilderBase.While \nWhile \nCancellableValueTaskBuilderBase.Zero \nZero"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#\u0060\u0060.ctor\u0060\u0060","title":"CancellableValueTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060","content":"CancellableValueTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#Combine","title":"CancellableValueTaskBuilderBase.Combine","content":"CancellableValueTaskBuilderBase.Combine \nCombine \nCreates an CancellableValueTask that first runs k1\n and then runs putation2, returning the result of computan2. \n\n\n The existence of this method permits the use of expression sequencing in the\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#Delay","title":"CancellableValueTaskBuilderBase.Delay","content":"CancellableValueTaskBuilderBase.Delay \nDelay \nCreates a CancellableValueTask that runs erator"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#For","title":"CancellableValueTaskBuilderBase.For","content":"CancellableValueTaskBuilderBase.For \nFor \nCreates an CancellableValueTask that enumerates the sequence\n on demand and runs y for each element. \nA cancellation check is performed on each iteration of the loop.\n\n The existence of this method permits the use of  in the\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#Return","title":"CancellableValueTaskBuilderBase.Return","content":"CancellableValueTaskBuilderBase.Return \nReturn \nCreates an computation that returns the result  \nA cancellation check is performed when the computation is executed.\n\n The existence of this method permits the use of urn in the\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#TryFinally","title":"CancellableValueTaskBuilderBase.TryFinally","content":"CancellableValueTaskBuilderBase.TryFinally \nTryFinally \nCreates an CancellableValueTask that runs putation. The action compenson is executed\n after putation completes, whether computan exits normally or by an exception. If compensation res an exception itself\n the original exception is discarded and the new exception becomes the overall result of the computation. \n\n\n The existence of this method permits the use of /finally in the\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#TryWith","title":"CancellableValueTaskBuilderBase.TryWith","content":"CancellableValueTaskBuilderBase.TryWith \nTryWith \nCreates an CancellableValueTask that runs putation and returns its result.\n If an exception happens then chHandler(exn) is called and the resulting computation executed instead. \n\n\n The existence of this method permits the use of /with in the\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#Using","title":"CancellableValueTaskBuilderBase.Using","content":"CancellableValueTaskBuilderBase.Using \nUsing \nCreates an CancellableValueTask that runs der(resource).\n The action ource.DisposeAsync() is executed as this computation yields its result\n or if the CancellableValueTask exits by an exception or by cancellation. \n\n\n The existence of this method permits the use of  and use! ine\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#While","title":"CancellableValueTaskBuilderBase.While","content":"CancellableValueTaskBuilderBase.While \nWhile \nCreates an CancellableValueTask that runs putation repeatedly\n until rd() becomes false. \n\n\n The existence of this method permits the use of le in the\n cellableValueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskbuilderbase.html#Zero","title":"CancellableValueTaskBuilderBase.Zero","content":"CancellableValueTaskBuilderBase.Zero \nZero \nCreates an CancellableValueTask that just returns  \n\n The existence of this method permits the use of empty e branches in the\n cellableValueTask { ... } computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskcode-2.html","title":"CancellableValueTaskCode\u003C\u0027TOverall, \u0027T\u003E","content":"CancellableValueTaskCode\u003C\u0027TOverall, \u0027T\u003E \n\n A special compiler-recognised delegate type for specifying blocks of CancellableValueTask code with access to the state machine\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskresumptiondynamicinfo-1.html","title":"CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E","content":"CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a CancellableValueTask state machine created dynamically\n \nCancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \nCancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskresumptiondynamicinfo-1.html#ResumptionData","title":"CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData","content":"CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskresumptiondynamicinfo-1.html#ResumptionFunc","title":"CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc","content":"CancellableValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskresumptionfunc-1.html","title":"CancellableValueTaskResumptionFunc\u003C\u0027TOverall\u003E","content":"CancellableValueTaskResumptionFunc\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a CancellableValueTask state machine created dynamically\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskstatemachine-1.html","title":"CancellableValueTaskStateMachine\u003C\u0027TOverall\u003E","content":"CancellableValueTaskStateMachine\u003C\u0027TOverall\u003E \n\n The extra data stored in ResumableStateMachine for tasks\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskstatemachinedata-1.html","title":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E","content":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E \n\n The extra data stored in ResumableStateMachine for tasks\n \nCancellableValueTaskStateMachineData\u003C\u0027T\u003E.ThrowIfCancellationRequested \nThrowIfCancellationRequested \nCancellableValueTaskStateMachineData\u003C\u0027T\u003E.CancellationToken \nCancellationToken \nCancellableValueTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \nCancellableValueTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskstatemachinedata-1.html#ThrowIfCancellationRequested","title":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.ThrowIfCancellationRequested","content":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.ThrowIfCancellationRequested \nThrowIfCancellationRequested \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskstatemachinedata-1.html#CancellationToken","title":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.CancellationToken","content":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.CancellationToken \nCancellationToken \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskstatemachinedata-1.html#Result","title":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.Result","content":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-cancellablevaluetasks-cancellablevaluetaskstatemachinedata-1.html#MethodBuilder","title":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder","content":"CancellableValueTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks.html","title":"ColdTasks","content":"ColdTasks \n\n Contains methods to build ColdTasks using the F# computation expression syntax\n \nColdTasks.AsyncExtenions \nAsyncExtenions \nColdTasks.ColdTask \nColdTask \nColdTasks.ColdTaskBuilder \nColdTaskBuilder \nColdTasks.BackgroundColdTaskBuilder \nBackgroundColdTaskBuilder \nColdTasks.ColdTask\u003C\u0027T\u003E \nColdTask\u003C\u0027T\u003E \nColdTasks.ColdTask \nColdTask \nColdTasks.ColdTaskBuilder \nColdTaskBuilder \nColdTasks.ColdTaskBuilderBase \nColdTaskBuilderBase \nColdTasks.ColdTaskCode\u003C\u0027TOverall, \u0027T\u003E \nColdTaskCode\u003C\u0027TOverall, \u0027T\u003E \nColdTasks.ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nColdTasks.ColdTaskResumptionFunc\u003C\u0027TOverall\u003E \nColdTaskResumptionFunc\u003C\u0027TOverall\u003E \nColdTasks.ColdTaskStateMachine\u003C\u0027TOverall\u003E \nColdTaskStateMachine\u003C\u0027TOverall\u003E \nColdTasks.ColdTaskStateMachineData\u003C\u0027T\u003E \nColdTaskStateMachineData\u003C\u0027T\u003E"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html","title":"AsyncExtenions","content":"AsyncExtenions \n\n A set of extension methods making it possible to bind against \u003Ca href=\u0022https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtask-1.html\u0022\u003EColdTask\u003C/a\u003E in async computations.\n  \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom \nAsyncExtenions.Bind \nBind \nAsyncExtenions.ReturnFrom \nReturnFrom \nAsyncExtenions.Source \nSource \nAsyncExtenions.Source \nSource"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#Bind","title":"AsyncExtenions.Bind","content":"AsyncExtenions.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#ReturnFrom","title":"AsyncExtenions.ReturnFrom","content":"AsyncExtenions.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#Source","title":"AsyncExtenions.Source","content":"AsyncExtenions.Source \nSource \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-asyncextenions.html#Source","title":"AsyncExtenions.Source","content":"AsyncExtenions.Source \nSource \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html","title":"ColdTask","content":"ColdTask \n\n Contains a set of standard functional helper function\n \nColdTask.singleton \nsingleton \nColdTask.bind \nbind \nColdTask.map \nmap \nColdTask.apply \napply \nColdTask.zip \nzip \nColdTask.parallelZip \nparallelZip \nColdTask.ofUnit \nofUnit \nColdTask.toUnit \ntoUnit"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#singleton","title":"ColdTask.singleton","content":"ColdTask.singleton \nsingleton \nLifts an item to a ColdTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#bind","title":"ColdTask.bind","content":"ColdTask.bind \nbind \nAllows chaining of ColdTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#map","title":"ColdTask.map","content":"ColdTask.map \nmap \nAllows chaining of ColdTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#apply","title":"ColdTask.apply","content":"ColdTask.apply \napply \nAllows chaining of ColdTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#zip","title":"ColdTask.zip","content":"ColdTask.zip \nzip \nTakes two ColdTasks, starts them serially in order of left to right, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#parallelZip","title":"ColdTask.parallelZip","content":"ColdTask.parallelZip \nparallelZip \nTakes two ColdTask, starts them concurrently, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#ofUnit","title":"ColdTask.ofUnit","content":"ColdTask.ofUnit \nofUnit \nCoverts a ColdTask to a ColdTask\\\u003Cunit\\\u003E."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskmodule.html#toUnit","title":"ColdTask.toUnit","content":"ColdTask.toUnit \ntoUnit \nCoverts a ColdTask\\\u003C_\\\u003E to a ColdTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuildermodule.html","title":"ColdTaskBuilder","content":"ColdTaskBuilder \n\n Contains the coldTasks computation expression builder.\n \nColdTaskBuilder.coldTask \ncoldTask \nColdTaskBuilder.backgroundColdTask \nbackgroundColdTask"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuildermodule.html#coldTask","title":"ColdTaskBuilder.coldTask","content":"ColdTaskBuilder.coldTask \ncoldTask \n\n Builds a coldTask using computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuildermodule.html#backgroundColdTask","title":"ColdTaskBuilder.backgroundColdTask","content":"ColdTaskBuilder.backgroundColdTask \nbackgroundColdTask \n\n Builds a coldTask using computation expression syntax which switches to execute on a background thread if not already doing so.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-backgroundcoldtaskbuilder.html","title":"BackgroundColdTaskBuilder","content":"BackgroundColdTaskBuilder \n\n Contains methods to build ColdTasks using the F# computation expression syntax\n \nBackgroundColdTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBackgroundColdTaskBuilder.Run \nRun \nBackgroundColdTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-backgroundcoldtaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"BackgroundColdTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"BackgroundColdTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-backgroundcoldtaskbuilder.html#Run","title":"BackgroundColdTaskBuilder.Run","content":"BackgroundColdTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task, executing in the threadpool using Task.Run\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-backgroundcoldtaskbuilder.html#RunDynamic","title":"BackgroundColdTaskBuilder.RunDynamic","content":"BackgroundColdTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtask-1.html","title":"ColdTask\u003C\u0027T\u003E","content":"ColdTask\u003C\u0027T\u003E \n\n unit -\u003E Task\u003C\u0027T\u003E\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtask.html","title":"ColdTask","content":"ColdTask \n\n unit -\u003E Task\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilder.html","title":"ColdTaskBuilder","content":"ColdTaskBuilder \n\n Contains methods to build ColdTasks using the F# computation expression syntax\n \nColdTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nColdTaskBuilder.Run \nRun \nColdTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"ColdTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"ColdTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilder.html#Run","title":"ColdTaskBuilder.Run","content":"ColdTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilder.html#RunDynamic","title":"ColdTaskBuilder.RunDynamic","content":"ColdTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html","title":"ColdTaskBuilderBase","content":"ColdTaskBuilderBase \n\n Contains the coldTask computation expression builder.\n \nColdTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nColdTaskBuilderBase.Combine \nCombine \nColdTaskBuilderBase.Delay \nDelay \nColdTaskBuilderBase.For \nFor \nColdTaskBuilderBase.Return \nReturn \nColdTaskBuilderBase.TryFinally \nTryFinally \nColdTaskBuilderBase.TryWith \nTryWith \nColdTaskBuilderBase.Using \nUsing \nColdTaskBuilderBase.While \nWhile \nColdTaskBuilderBase.Zero \nZero"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#\u0060\u0060.ctor\u0060\u0060","title":"ColdTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060","content":"ColdTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#Combine","title":"ColdTaskBuilderBase.Combine","content":"ColdTaskBuilderBase.Combine \nCombine \nCreates an ColdTask that first runs task1\n and then runs computation2, returning the result of computation2. \n\n\n The existence of this method permits the use of expression sequencing in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#Delay","title":"ColdTaskBuilderBase.Delay","content":"ColdTaskBuilderBase.Delay \nDelay \nCreates a ColdTask that runs generator"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#For","title":"ColdTaskBuilderBase.For","content":"ColdTaskBuilderBase.For \nFor \nCreates an ColdTask that enumerates the sequence seq\n on demand and runs body for each element. \n\n\n The existence of this method permits the use of for in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#Return","title":"ColdTaskBuilderBase.Return","content":"ColdTaskBuilderBase.Return \nReturn \nCreates an computation that returns the result v. \n\n\n The existence of this method permits the use of return in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#TryFinally","title":"ColdTaskBuilderBase.TryFinally","content":"ColdTaskBuilderBase.TryFinally \nTryFinally \nCreates an ColdTask that runs computation. The action compensation is executed\n after computation completes, whether computation exits normally or by an exception. If compensation raises an exception itself\n the original exception is discarded and the new exception becomes the overall result of the computation. \n\n\n The existence of this method permits the use of try/finally in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#TryWith","title":"ColdTaskBuilderBase.TryWith","content":"ColdTaskBuilderBase.TryWith \nTryWith \nCreates an ColdTask that runs computation and returns its result.\n If an exception happens then catchHandler(exn) is called and the resulting computation executed instead. \n\n\n The existence of this method permits the use of try/with in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#Using","title":"ColdTaskBuilderBase.Using","content":"ColdTaskBuilderBase.Using \nUsing \nCreates an ColdTask that runs binder(resource).\n The action resource.DisposeAsync() is executed as this computation yields its result\n or if the ColdTask exits by an exception or by cancellation. \n\n\n The existence of this method permits the use of use and use! in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#While","title":"ColdTaskBuilderBase.While","content":"ColdTaskBuilderBase.While \nWhile \nCreates an ColdTask that runs computation repeatedly\n until guard() becomes false. \n\n\n The existence of this method permits the use of while in the\n coldTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskbuilderbase.html#Zero","title":"ColdTaskBuilderBase.Zero","content":"ColdTaskBuilderBase.Zero \nZero \nCreates an ColdTask that just returns (). \n\n The existence of this method permits the use of empty else branches in the\n coldTask { ... } computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskcode-2.html","title":"ColdTaskCode\u003C\u0027TOverall, \u0027T\u003E","content":"ColdTaskCode\u003C\u0027TOverall, \u0027T\u003E \n\n A special compiler-recognised delegate type for specifying blocks of ColdTask code with access to the state machine\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskresumptiondynamicinfo-1.html","title":"ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E","content":"ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a ColdTask state machine created dynamically\n \nColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \nColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskresumptiondynamicinfo-1.html#ResumptionData","title":"ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData","content":"ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskresumptiondynamicinfo-1.html#ResumptionFunc","title":"ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc","content":"ColdTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskresumptionfunc-1.html","title":"ColdTaskResumptionFunc\u003C\u0027TOverall\u003E","content":"ColdTaskResumptionFunc\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a ColdTask state machine created dynamically\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskstatemachine-1.html","title":"ColdTaskStateMachine\u003C\u0027TOverall\u003E","content":"ColdTaskStateMachine\u003C\u0027TOverall\u003E \n\n This is used by the compiler as a template for creating state machine structs\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskstatemachinedata-1.html","title":"ColdTaskStateMachineData\u003C\u0027T\u003E","content":"ColdTaskStateMachineData\u003C\u0027T\u003E \n\n The extra data stored in ResumableStateMachine for tasks\n \nColdTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \nColdTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskstatemachinedata-1.html#Result","title":"ColdTaskStateMachineData\u003C\u0027T\u003E.Result","content":"ColdTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-coldtasks-coldtaskstatemachinedata-1.html#MethodBuilder","title":"ColdTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder","content":"ColdTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncs.html","title":"ParallelAsyncs","content":"ParallelAsyncs \n\n Contains the different parallelAsync type builders.\n \nParallelAsyncs.parallelAsyncUsingStartChild \nparallelAsyncUsingStartChild \nParallelAsyncs.parallelAsyncUsingStartImmediateAsTask \nparallelAsyncUsingStartImmediateAsTask \nParallelAsyncs.parallelAsync \nparallelAsync"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncs.html#parallelAsyncUsingStartChild","title":"ParallelAsyncs.parallelAsyncUsingStartChild","content":"ParallelAsyncs.parallelAsyncUsingStartChild \nparallelAsyncUsingStartChild \n\n Async computation expression which allows for parallel execution of asyncs with the applicative (and!) syntax.  This uses \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartChild\u0022\u003EFSharpAsync.StartChild\u003C/a\u003E to start async computations in parallel.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncs.html#parallelAsyncUsingStartImmediateAsTask","title":"ParallelAsyncs.parallelAsyncUsingStartImmediateAsTask","content":"ParallelAsyncs.parallelAsyncUsingStartImmediateAsTask \nparallelAsyncUsingStartImmediateAsTask \n\n Async computation expression which allows for parallel execution of asyncs with the applicative (and!) syntax.  This this \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartImmediateAsTask\u0022\u003EFSharpAsync.StartImmediateAsTask\u003C/a\u003E to start  async computations in parallel.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncs.html#parallelAsync","title":"ParallelAsyncs.parallelAsync","content":"ParallelAsyncs.parallelAsync \nparallelAsync \n\n Async computation expression which allows for parallel execution of asyncs with the applicative (and!) syntax.  This this \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartImmediateAsTask\u0022\u003EFSharpAsync.StartImmediateAsTask\u003C/a\u003E to start async computations in parallel.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetaskextensions.html","title":"ValueTaskExtensions","content":"ValueTaskExtensions \n\n Module with extension methods for \u003Ca href=\u0022https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\u0022\u003EValueTask\u003C/a\u003E.\n  \nValueTaskExtensions.FromCanceled \nFromCanceled \nValueTaskExtensions.FromCanceled \nFromCanceled \nValueTaskExtensions.AwaitValueTask \nAwaitValueTask \nValueTaskExtensions.AwaitValueTask \nAwaitValueTask \nValueTaskExtensions.AsValueTask \nAsValueTask"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetaskextensions.html#FromCanceled","title":"ValueTaskExtensions.FromCanceled","content":"ValueTaskExtensions.FromCanceled \nFromCanceled \nCreates a \u003Ca href=\u0022https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask\u0022\u003EValueTask\u003C/a\u003E that\u0027s completed due to cancellation with a specified cancellation token."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetaskextensions.html#FromCanceled","title":"ValueTaskExtensions.FromCanceled","content":"ValueTaskExtensions.FromCanceled \nFromCanceled \nCreates a \u003Ca href=\u0022https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\u0022\u003EValueTask\u003C/a\u003E that\u0027s completed due to cancellation with a specified cancellation token."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetaskextensions.html#AwaitValueTask","title":"ValueTaskExtensions.AwaitValueTask","content":"ValueTaskExtensions.AwaitValueTask \nAwaitValueTask \n\n Return an asynchronous computation that will check if ValueTask is completed or wait for\n the given task to complete and return its result.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetaskextensions.html#AwaitValueTask","title":"ValueTaskExtensions.AwaitValueTask","content":"ValueTaskExtensions.AwaitValueTask \nAwaitValueTask \n\n Return an asynchronous computation that will check if ValueTask is completed or wait for\n the given task to complete and return its result.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetaskextensions.html#AsValueTask","title":"ValueTaskExtensions.AsValueTask","content":"ValueTaskExtensions.AsValueTask \nAsValueTask \n\n Runs an asynchronous computation, starting immediately on the current operating system thread,\n but also returns the execution as \u003Ca href=\u0022https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\u0022\u003EValueTask\u003C/a\u003E.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks.html","title":"ValueTasks","content":"ValueTasks \n\n Contains methods to build ValueTasks using the F# computation expression syntax\n \nValueTasks.ValueTask \nValueTask \nValueTasks.ValueTaskBuilder \nValueTaskBuilder \nValueTasks.BackgroundValueTaskBuilder \nBackgroundValueTaskBuilder \nValueTasks.ValueTaskBuilder \nValueTaskBuilder \nValueTasks.ValueTaskBuilderBase \nValueTaskBuilderBase \nValueTasks.ValueTaskCode\u003C\u0027TOverall, \u0027T\u003E \nValueTaskCode\u003C\u0027TOverall, \u0027T\u003E \nValueTasks.ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \nValueTasks.ValueTaskResumptionFunc\u003C\u0027TOverall\u003E \nValueTaskResumptionFunc\u003C\u0027TOverall\u003E \nValueTasks.ValueTaskStateMachine\u003C\u0027TOverall\u003E \nValueTaskStateMachine\u003C\u0027TOverall\u003E \nValueTasks.ValueTaskStateMachineData\u003C\u0027T\u003E \nValueTaskStateMachineData\u003C\u0027T\u003E"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html","title":"ValueTask","content":"ValueTask \n\n Contains a set of standard functional helper function\n \nValueTask.singleton \nsingleton \nValueTask.bind \nbind \nValueTask.map \nmap \nValueTask.apply \napply \nValueTask.zip \nzip \nValueTask.ofUnit \nofUnit \nValueTask.ofTask \nofTask \nValueTask.ofTaskUnit \nofTaskUnit \nValueTask.toTask \ntoTask \nValueTask.toTaskUnit \ntoTaskUnit \nValueTask.toUnit \ntoUnit"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#singleton","title":"ValueTask.singleton","content":"ValueTask.singleton \nsingleton \nLifts an item to a ValueTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#bind","title":"ValueTask.bind","content":"ValueTask.bind \nbind \nAllows chaining of ValueTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#map","title":"ValueTask.map","content":"ValueTask.map \nmap \nAllows chaining of ValueTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#apply","title":"ValueTask.apply","content":"ValueTask.apply \napply \nAllows chaining of ValueTasks."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#zip","title":"ValueTask.zip","content":"ValueTask.zip \nzip \nTakes two ValueTasks, starts them serially in order of left to right, and returns a tuple of the pair."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#ofUnit","title":"ValueTask.ofUnit","content":"ValueTask.ofUnit \nofUnit \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#ofTask","title":"ValueTask.ofTask","content":"ValueTask.ofTask \nofTask \nInitializes a new instance of the System.Threading.Tasks.ValueTask class using the supplied task that represents the operation."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#ofTaskUnit","title":"ValueTask.ofTaskUnit","content":"ValueTask.ofTaskUnit \nofTaskUnit \nInitializes a new instance of the System.Threading.Tasks.ValueTask class using the supplied task that represents the operation."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#toTask","title":"ValueTask.toTask","content":"ValueTask.toTask \ntoTask \nRetrieves a System.Threading.Tasks.Task object that represents this System.Threading.Tasks.ValueTask\u00601"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#toTaskUnit","title":"ValueTask.toTaskUnit","content":"ValueTask.toTaskUnit \ntoTaskUnit \nRetrieves a System.Threading.Tasks.Task object that represents this System.Threading.Tasks.ValueTask."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetask.html#toUnit","title":"ValueTask.toUnit","content":"ValueTask.toUnit \ntoUnit \nConverts a ValueTask\u003CT\u003E to its non-generic counterpart."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuildermodule.html","title":"ValueTaskBuilder","content":"ValueTaskBuilder \n\n Contains the valueTask computation expression builder.\n \nValueTaskBuilder.valueTask \nvalueTask \nValueTaskBuilder.backgroundValueTask \nbackgroundValueTask"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuildermodule.html#valueTask","title":"ValueTaskBuilder.valueTask","content":"ValueTaskBuilder.valueTask \nvalueTask \n\n Builds a valueTask using computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuildermodule.html#backgroundValueTask","title":"ValueTaskBuilder.backgroundValueTask","content":"ValueTaskBuilder.backgroundValueTask \nbackgroundValueTask \n\n Builds a valueTask using computation expression syntax which switches to execute on a background thread if not already doing so.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-backgroundvaluetaskbuilder.html","title":"BackgroundValueTaskBuilder","content":"BackgroundValueTaskBuilder \n\n Contains methods to build ValueTasks using the F# computation expression syntax\n \nBackgroundValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBackgroundValueTaskBuilder.Run \nRun \nBackgroundValueTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-backgroundvaluetaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"BackgroundValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"BackgroundValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-backgroundvaluetaskbuilder.html#Run","title":"BackgroundValueTaskBuilder.Run","content":"BackgroundValueTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task, executing in the threadpool using Task.Run\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-backgroundvaluetaskbuilder.html#RunDynamic","title":"BackgroundValueTaskBuilder.RunDynamic","content":"BackgroundValueTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilder.html","title":"ValueTaskBuilder","content":"ValueTaskBuilder \n\n Contains methods to build ValueTasks using the F# computation expression syntax\n  \nValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nValueTaskBuilder.Run \nRun \nValueTaskBuilder.RunDynamic \nRunDynamic"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilder.html#\u0060\u0060.ctor\u0060\u0060","title":"ValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060","content":"ValueTaskBuilder.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilder.html#Run","title":"ValueTaskBuilder.Run","content":"ValueTaskBuilder.Run \nRun \n\n Hosts the task code in a state machine and starts the task.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilder.html#RunDynamic","title":"ValueTaskBuilder.RunDynamic","content":"ValueTaskBuilder.RunDynamic \nRunDynamic \n\n The entry point for the dynamic implementation of the corresponding operation. Do not use directly, only used when executing quotations that involve tasks or other reflective execution of F# code.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html","title":"ValueTaskBuilderBase","content":"ValueTaskBuilderBase \n\n Contains methods to build ValueTasks using the F# computation expression syntax\n  \nValueTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nValueTaskBuilderBase.Combine \nCombine \nValueTaskBuilderBase.Delay \nDelay \nValueTaskBuilderBase.For \nFor \nValueTaskBuilderBase.Return \nReturn \nValueTaskBuilderBase.TryFinally \nTryFinally \nValueTaskBuilderBase.TryWith \nTryWith \nValueTaskBuilderBase.Using \nUsing \nValueTaskBuilderBase.While \nWhile \nValueTaskBuilderBase.Zero \nZero"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#\u0060\u0060.ctor\u0060\u0060","title":"ValueTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060","content":"ValueTaskBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#Combine","title":"ValueTaskBuilderBase.Combine","content":"ValueTaskBuilderBase.Combine \nCombine \nCreates an ValueTask that first runs task1\n and then runs computation2, returning the result of computation2. \n\n\n The existence of this method permits the use of expression sequencing in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#Delay","title":"ValueTaskBuilderBase.Delay","content":"ValueTaskBuilderBase.Delay \nDelay \nCreates a ValueTask that runs generator"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#For","title":"ValueTaskBuilderBase.For","content":"ValueTaskBuilderBase.For \nFor \nCreates an ValueTask that enumerates the sequence seq\n on demand and runs body for each element. \nA cancellation check is performed on each iteration of the loop.\n\n The existence of this method permits the use of for in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#Return","title":"ValueTaskBuilderBase.Return","content":"ValueTaskBuilderBase.Return \nReturn \nCreates an computation that returns the result v. \nA cancellation check is performed when the computation is executed.\n\n The existence of this method permits the use of return in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#TryFinally","title":"ValueTaskBuilderBase.TryFinally","content":"ValueTaskBuilderBase.TryFinally \nTryFinally \nCreates an ValueTask that runs computation. The action compensation is executed\n after computation completes, whether computation exits normally or by an exception. If compensation raises an exception itself\n the original exception is discarded and the new exception becomes the overall result of the computation. \n\n\n The existence of this method permits the use of try/finally in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#TryWith","title":"ValueTaskBuilderBase.TryWith","content":"ValueTaskBuilderBase.TryWith \nTryWith \nCreates an ValueTask that runs computation and returns its result.\n If an exception happens then catchHandler(exn) is called and the resulting computation executed instead. \n\n\n The existence of this method permits the use of try/with in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#Using","title":"ValueTaskBuilderBase.Using","content":"ValueTaskBuilderBase.Using \nUsing \nCreates an ValueTask that runs binder(resource).\n The action resource.DisposeAsync() is executed as this computation yields its result\n or if the ValueTask exits by an exception or by cancellation. \n\n\n The existence of this method permits the use of use and use! in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#While","title":"ValueTaskBuilderBase.While","content":"ValueTaskBuilderBase.While \nWhile \nCreates an ValueTask that runs computation repeatedly\n until guard() becomes false. \n\n\n The existence of this method permits the use of while in the\n valueTask { ... } computation expression syntax."},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskbuilderbase.html#Zero","title":"ValueTaskBuilderBase.Zero","content":"ValueTaskBuilderBase.Zero \nZero \nCreates an ValueTask that just returns (). \n\n The existence of this method permits the use of empty else branches in the\n valueTask { ... } computation expression syntax.\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskcode-2.html","title":"ValueTaskCode\u003C\u0027TOverall, \u0027T\u003E","content":"ValueTaskCode\u003C\u0027TOverall, \u0027T\u003E \n\n A special compiler-recognised delegate type for specifying blocks of valueTask code with access to the state machine\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskresumptiondynamicinfo-1.html","title":"ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E","content":"ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a valueTask state machine created dynamically\n \nValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \nValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskresumptiondynamicinfo-1.html#ResumptionData","title":"ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData","content":"ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionData \nResumptionData \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskresumptiondynamicinfo-1.html#ResumptionFunc","title":"ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc","content":"ValueTaskResumptionDynamicInfo\u003C\u0027TOverall\u003E.ResumptionFunc \nResumptionFunc \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskresumptionfunc-1.html","title":"ValueTaskResumptionFunc\u003C\u0027TOverall\u003E","content":"ValueTaskResumptionFunc\u003C\u0027TOverall\u003E \n\n Represents the runtime continuation of a valueTask state machine created dynamically\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskstatemachine-1.html","title":"ValueTaskStateMachine\u003C\u0027TOverall\u003E","content":"ValueTaskStateMachine\u003C\u0027TOverall\u003E \n\n This is used by the compiler as a template for creating state machine structs\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskstatemachinedata-1.html","title":"ValueTaskStateMachineData\u003C\u0027T\u003E","content":"ValueTaskStateMachineData\u003C\u0027T\u003E \n\n The extra data stored in ResumableStateMachine for tasks\n \nValueTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \nValueTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskstatemachinedata-1.html#Result","title":"ValueTaskStateMachineData\u003C\u0027T\u003E.Result","content":"ValueTaskStateMachineData\u003C\u0027T\u003E.Result \nResult \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-valuetasks-valuetaskstatemachinedata-1.html#MethodBuilder","title":"ValueTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder","content":"ValueTaskStateMachineData\u003C\u0027T\u003E.MethodBuilder \nMethodBuilder \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaitable-3.html","title":"Awaitable\u003C\u0027Awaitable, \u0027Awaiter, \u0027TResult\u003E","content":"Awaitable\u003C\u0027Awaitable, \u0027Awaiter, \u0027TResult\u003E \n\n A structure looks like an Awaitable\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-awaiter-2.html","title":"Awaiter\u003C\u0027Awaiter, \u0027TResult\u003E","content":"Awaiter\u003C\u0027Awaiter, \u0027TResult\u003E \n\n\n A structure that looks like an Awaiter\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasync.html","title":"ParallelAsync","content":"ParallelAsync \n\n Contains different implementations for parallel zip functions.\n \nParallelAsync.zipUsingStartImmediateAsTask \nzipUsingStartImmediateAsTask \nParallelAsync.zipWithStartChild \nzipWithStartChild"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasync.html#zipUsingStartImmediateAsTask","title":"ParallelAsync.zipUsingStartImmediateAsTask","content":"ParallelAsync.zipUsingStartImmediateAsTask \nzipUsingStartImmediateAsTask \n\n Executes two asyncs concurrently using \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartImmediateAsTask\u0022\u003EFSharpAsync.StartImmediateAsTask\u003C/a\u003E and returns a tuple of the values\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasync.html#zipWithStartChild","title":"ParallelAsync.zipWithStartChild","content":"ParallelAsync.zipWithStartChild \nzipWithStartChild \n\n Executes two asyncs concurrently \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartChild\u0022\u003EFSharpAsync.StartChild\u003C/a\u003E and returns a tuple of the values using\n "},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html","title":"ParallelAsyncBuilderBase","content":"ParallelAsyncBuilderBase \n\n Base class for ParallelAsync functionality\n \nParallelAsyncBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nParallelAsyncBuilderBase.Bind \nBind \nParallelAsyncBuilderBase.BindReturn \nBindReturn \nParallelAsyncBuilderBase.Combine \nCombine \nParallelAsyncBuilderBase.Delay \nDelay \nParallelAsyncBuilderBase.For \nFor \nParallelAsyncBuilderBase.Return \nReturn \nParallelAsyncBuilderBase.ReturnFrom \nReturnFrom \nParallelAsyncBuilderBase.TryFinally \nTryFinally \nParallelAsyncBuilderBase.TryWith \nTryWith \nParallelAsyncBuilderBase.Using \nUsing \nParallelAsyncBuilderBase.While \nWhile \nParallelAsyncBuilderBase.Zero \nZero"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#\u0060\u0060.ctor\u0060\u0060","title":"ParallelAsyncBuilderBase.\u0060\u0060.ctor\u0060\u0060","content":"ParallelAsyncBuilderBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#Bind","title":"ParallelAsyncBuilderBase.Bind","content":"ParallelAsyncBuilderBase.Bind \nBind \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#BindReturn","title":"ParallelAsyncBuilderBase.BindReturn","content":"ParallelAsyncBuilderBase.BindReturn \nBindReturn \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#Combine","title":"ParallelAsyncBuilderBase.Combine","content":"ParallelAsyncBuilderBase.Combine \nCombine \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#Delay","title":"ParallelAsyncBuilderBase.Delay","content":"ParallelAsyncBuilderBase.Delay \nDelay \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#For","title":"ParallelAsyncBuilderBase.For","content":"ParallelAsyncBuilderBase.For \nFor \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#Return","title":"ParallelAsyncBuilderBase.Return","content":"ParallelAsyncBuilderBase.Return \nReturn \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#ReturnFrom","title":"ParallelAsyncBuilderBase.ReturnFrom","content":"ParallelAsyncBuilderBase.ReturnFrom \nReturnFrom \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#TryFinally","title":"ParallelAsyncBuilderBase.TryFinally","content":"ParallelAsyncBuilderBase.TryFinally \nTryFinally \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#TryWith","title":"ParallelAsyncBuilderBase.TryWith","content":"ParallelAsyncBuilderBase.TryWith \nTryWith \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#Using","title":"ParallelAsyncBuilderBase.Using","content":"ParallelAsyncBuilderBase.Using \nUsing \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#While","title":"ParallelAsyncBuilderBase.While","content":"ParallelAsyncBuilderBase.While \nWhile \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderbase.html#Zero","title":"ParallelAsyncBuilderBase.Zero","content":"ParallelAsyncBuilderBase.Zero \nZero \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderusingstartchild.html","title":"ParallelAsyncBuilderUsingStartChild","content":"ParallelAsyncBuilderUsingStartChild \n\n Async computation expression which allows for parallel execution of asyncs with the applicative (and!) syntax.  This uses \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartChild\u0022\u003EFSharpAsync.StartChild\u003C/a\u003E to start async computations in parallel.\n  \nParallelAsyncBuilderUsingStartChild.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nParallelAsyncBuilderUsingStartChild.MergeSources \nMergeSources"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderusingstartchild.html#\u0060\u0060.ctor\u0060\u0060","title":"ParallelAsyncBuilderUsingStartChild.\u0060\u0060.ctor\u0060\u0060","content":"ParallelAsyncBuilderUsingStartChild.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderusingstartchild.html#MergeSources","title":"ParallelAsyncBuilderUsingStartChild.MergeSources","content":"ParallelAsyncBuilderUsingStartChild.MergeSources \nMergeSources \n\n Called for \u003Ca href=\u0022https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#and\u0022\u003Eand!\u003C/a\u003E in computation expressions.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderusingstartimmediateastask.html","title":"ParallelAsyncBuilderUsingStartImmediateAsTask","content":"ParallelAsyncBuilderUsingStartImmediateAsTask \n\n Async computation expression which allows for parallel execution of asyncs with the applicative (and!) syntax.  This this \u003Ca href=\u0022https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync#StartImmediateAsTask\u0022\u003EFSharpAsync.StartImmediateAsTask\u003C/a\u003E to start  async computations in parallel.\n  \nParallelAsyncBuilderUsingStartImmediateAsTask.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nParallelAsyncBuilderUsingStartImmediateAsTask.MergeSources \nMergeSources"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderusingstartimmediateastask.html#\u0060\u0060.ctor\u0060\u0060","title":"ParallelAsyncBuilderUsingStartImmediateAsTask.\u0060\u0060.ctor\u0060\u0060","content":"ParallelAsyncBuilderUsingStartImmediateAsTask.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksreference/icedtasks-parallelasyncbuilderusingstartimmediateastask.html#MergeSources","title":"ParallelAsyncBuilderUsingStartImmediateAsTask.MergeSources","content":"ParallelAsyncBuilderUsingStartImmediateAsTask.MergeSources \nMergeSources \n\n Called for \u003Ca href=\u0022https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#and\u0022\u003Eand!\u003C/a\u003E in computation expressions.\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksindex.html","title":"index","content":"\n\nBelow is an example homepage.  You should start by simply explaining your project in plainest and simplest terms possible.\n\n## What is My IcedTasks?\n\nThis library contains additional [computation expressions](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions) for the [task CE](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/task-expressions) utilizing the [Resumable Code](https://github.com/fsharp/fslang-design/blob/main/FSharp-6.0/FS-1087-resumable-code.md) introduced [in F# 6.0](https://devblogs.microsoft.com/dotnet/whats-new-in-fsharp-6/#making-f-faster-and-more-interopable-with-task).\n\n- \u0060ValueTask\u003C\u0027T\u003E\u0060 - This utilizes .NET\u0027s [ValueTask](https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/) (which is essentially a [Discriminated Union](https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/discriminated-unions) of \u0060\u0027Value | Task\u003C\u0027Value\u003E\u0060) for possibly better performance in synchronous scenarios. Similar to [F#\u0027s Task Expression](https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/task-expressions)\n\n- \u0060ColdTask\u003C\u0027T\u003E\u0060 - Alias for \u0060unit -\u003E Task\u003C\u0027T\u003E\u0060.  Allows for lazy evaluation (also known as Cold) of the tasks, similar to [F#\u0027s Async being cold](https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/async#core-concepts-of-async).\n\n- \u0060CancellableTask\u003C\u0027T\u003E\u0060 - Alias for \u0060CancellationToken -\u003E Task\u003C\u0027T\u003E\u0060.  Allows for lazy evaluation (also known as Cold) of the tasks, similar to [F#\u0027s Async being cold](https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/async#core-concepts-of-async). Additionally, allows for flowing a [CancellationToken](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-6.0) through the computation, similar to [F#\u0027s Async cancellation support](http://tomasp.net/blog/async-csharp-differences.aspx/#:~:text=In%20F%23%20asynchronous%20workflows%2C%20the,and%20everything%20will%20work%20automatically).\n\n- \u0060CancellableValueTask\u003C\u0027T\u003E\u0060 - Alias for \u0060CancellationToken -\u003E ValueTask\u003C\u0027T\u003E\u0060.  Allows for lazy evaluation (also known as Cold) of the tasks, similar to [F#\u0027s Async being cold](https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/async#core-concepts-of-async). Additionally, allows for flowing a [CancellationToken](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-6.0) through the computation, similar to [F#\u0027s Async cancellation support](http://tomasp.net/blog/async-csharp-differences.aspx/#:~:text=In%20F%23%20asynchronous%20workflows%2C%20the,and%20everything%20will%20work%20automatically).\n\n- \u0060ParallelAsync\u003C\u0027T\u003E\u0060 - Utilizes the [applicative syntax](https://docs.microsoft.com/en-us/dotnet/fsharp/whats-new/fsharp-50#applicative-computation-expressions) to allow parallel execution of [Async\u003C\u0027T\u003E expressions](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/async-expressions). See [this discussion](https://github.com/dotnet/fsharp/discussions/11043) as to why this is a separate computation expression.\n\n\n\n| Computation Expression\u003Csup\u003E1\u003C/sup\u003E | Library\u003Csup\u003E2\u003C/sup\u003E | TFM\u003Csup\u003E3\u003C/sup\u003E | Hot/Cold\u003Csup\u003E4\u003C/sup\u003E | Multi-start\u003Csup\u003E5\u003C/sup\u003E | Tailcalls\u003Csup\u003E6\u003C/sup\u003E | CancellationToken propagation\u003Csup\u003E7\u003C/sup\u003E | Cancellation checks\u003Csup\u003E8\u003C/sup\u003E | Parallel when using and!\u003Csup\u003E9\u003C/sup\u003E |\n|------------------------------------|---------------------|-----------------|----------------------|-------------------------|-----------------------|-------------------------------------------|---------------------------------|--------------------------------------|\n| F# Async                           | FSharp.Core         | netstandard2.0  | Cold                 | multiple                | tailcalls             | implicit                                  | implicit                        | No                                   |\n| F# ParallelAsync                   | IcedTasks           | netstandard2.0  | Cold                 | multiple                | tailcalls             | implicit                                  | implicit                        | Yes                                  |\n| F# Task/C# Task                    | FSharp.Core         | netstandard2.0  | Hot                  | once-start              | no tailcalls          | explicit                                  | explicit                        | No                                   |\n| F# ValueTask                       | IcedTasks           | netstandard2.1  | Hot                  | once-start              | no tailcalls          | explicit                                  | explicit                        | Yes                                  |\n| F# ColdTask                        | IcedTasks           | netstandard2.0  | Cold                 | multiple                | no tailcalls          | explicit                                  | explicit                        | Yes                                  |\n| F# CancellableTask                 | IcedTasks           | netstandard2.0  | Cold                 | multiple                | no tailcalls          | implicit                                  | implicit                        | Yes                                  |\n| F# CancellableValueTask            | IcedTasks           | netstandard2.1  | Cold                 | multiple                | no tailcalls          | implicit                                  | implicit                        | Yes                                  |\n\n- \u003Csup\u003E1\u003C/sup\u003E - [Computation Expression](https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions)\n- \u003Csup\u003E2\u003C/sup\u003E - Which [Nuget](https://www.nuget.org/) package do they come from\n- \u003Csup\u003E3\u003C/sup\u003E - Which [Target Framework Moniker](https://learn.microsoft.com/en-us/dotnet/standard/frameworks) these are available in\n- \u003Csup\u003E4\u003C/sup\u003E - Hot refers to the asynchronous code block already been started and will eventually produce a value. Cold refers to the asynchronous code block that is not started and must be started explicitly by caller code. See [F# Async Tutorial](https://learn.microsoft.com/en-us/dotnet/fsharp/tutorials/async#core-concepts-of-async) and [Asynchronous C# and F# (II.): How do they differ?](http://tomasp.net/blog/async-csharp-differences.aspx/) for more info.\n- \u003Csup\u003E5\u003C/sup\u003E - Multi-start refers to being able to start the asynchronous code block again.  See [FAQ on Task Start](https://devblogs.microsoft.com/pfxteam/faq-on-task-start/#:~:text=Question%3A%20Can%20I%20call%20Start,will%20result%20in%20an%20exception.) for more info.\n- \u003Csup\u003E6\u003C/sup\u003E - Allows use of \u0060let rec\u0060 with the computation expression. See [Tail call Recursion](https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/functions/recursive-functions-the-rec-keyword#tail-recursion) for more info.\n- \u003Csup\u003E7\u003C/sup\u003E - \u0060CancellationToken\u0060 is propagated to all types the support implicit \u0060CancellatationToken\u0060 passing. Calling \u0060cancellableTask { ... }\u0060 nested inside \u0060async { ... }\u0060 (or any of those combinations) will use the \u0060CancellationToken\u0060 from when the code was started.\n- \u003Csup\u003E8\u003C/sup\u003E - Cancellation will be checked before binds and runs.\n- \u003Csup\u003E9\u003C/sup\u003E - Allows parallel execution of the asynchronous code using the [Applicative Syntax](https://docs.microsoft.com/en-us/dotnet/fsharp/whats-new/fsharp-50#applicative-computation-expressions) in computation expressions. \n\n\n\n## Why should I use IcedTasks?\n\n### For ValueTasks\n\nF# doesn\u0027t currently have a \u0060valueTask\u0060 computation expression.\n\n### For Cold \u0026 CancellableTasks\n- You want control over when your tasks are started\n- You want to be able to re-run these executable tasks\n- You don\u0027t want to pollute your methods/functions with extra CancellationToken parameters\n- You want the computation to handle checking cancellation before every bind.\n\n\n## How do I get started \n\n    dotnet add nuget IcedTasks\n\n## Who are the maintainers of the project\n\n- @TheAngryByrd\n\n\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksExplanations/Explanation-1.html","title":"Explanation 1","content":"---\r\ntitle: Explanation 1\r\ncategory: Explanations\r\ncategoryindex: 3\r\nindex: 1\r\n---\r\n\r\n\r\n# Explanation 1"},{"uri":"https://github.com/TheAngryByrd/IcedTasksExplanations/Explanation-2.html","title":"Explanation 2","content":"---\r\ntitle: Explanation 2\r\ncategory: Explanations\r\ncategoryindex: 3\r\nindex: 2\r\n---\r\n\r\n\r\n# Explanation 2"},{"uri":"https://github.com/TheAngryByrd/IcedTasksHow-To-Guides/How-to-1.html","title":"How To 1","content":"---\r\ntitle: How To 1\r\ncategory: How To Guides\r\ncategoryindex: 2\r\nindex: 1\r\n---\r\n\r\n# How To 1"},{"uri":"https://github.com/TheAngryByrd/IcedTasksHow-To-Guides/How-to-2.html","title":"How To 2","content":"---\r\ntitle: How To 2\r\ncategory: How To Guides\r\ncategoryindex: 2\r\nindex: 1\r\n---\r\n\r\n# How To 2"},{"uri":"https://github.com/TheAngryByrd/IcedTasksTutorials/Tutorial-1.html","title":"Tutorial 1","content":"---\r\ntitle: Tutorial 1\r\ncategory: Tutorials\r\ncategoryindex: 1\r\nindex: 1\r\n---\r\n\r\n# Tutorial 1\r\n\r\n\r\nDo this\r\n\r\n\r\n    /// The Hello World of functional languages!\r\n    let rec factorial x = \r\n      if x = 0 then 1 \r\n      else x * (factorial (x - 1))\r\n\r\n    let f10 = factorial 10\r\n"},{"uri":"https://github.com/TheAngryByrd/IcedTasksTutorials/Tutorial-2.html","title":"Tutorial 2","content":"---\r\ntitle: Tutorial 2\r\ncategory: Tutorials\r\ncategoryindex: 2\r\nindex: 2\r\n---\r\n\r\n# Tutorial 2"},{"uri":"https://github.com/TheAngryByrd/IcedTasksTutorials/Tutorial-3.html","title":"A Literate Script","content":"(**\n---\ntitle: A Literate Script\ncategory: Tutorials\ncategoryindex: 2\nindex: 1\n---\n\n\n# Hello World\n\n*)\n\n// #r \u0022nuget: Project1\u0022\n// open Project1\n// open System\n\n// #r \u0022nuget: Project23\u0022\n// open Project2\n\n// let person = Say.Foo.Create (\u0022Person\u0022,DateTime.Now)\n\n// Say.hello3 person |\u003E Async.RunSynchronously\n(*** include-output ***)"}]